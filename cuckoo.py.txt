import numpy as np
import random

class CuckooSearch:
    def __init__(self, jobs, machines, n_nests, n_iterations, alpha=0.01, beta=1.5):
        self.jobs = jobs
        self.machines = machines
        self.n_nests = n_nests
        self.n_iterations = n_iterations
        self.alpha = alpha
        self.beta = beta
        self.n_jobs = len(jobs)
        self.best_solution = None
        self.best_makespan = float('inf')

    def run(self):
        nests = [self.random_solution() for _ in range(self.n_nests)]
        for _ in range(self.n_iterations):
            for nest in nests:
                new_nest = self.cuckoo(nest)
                new_makespan = self.makespan(new_nest)
                if new_makespan < self.makespan(nest):
                    nest[:] = new_nest

                if new_makespan < self.best_makespan:
                    self.best_makespan = new_makespan
                    self.best_solution = new_nest

        return self.best_solution, self.best_makespan

    def cuckoo(self, nest):
        new_nest = nest[:]
        for i in range(len(nest)):
            if random.random() < 0.5:
                new_nest[i] = int(nest[i] + self.alpha * (random.random() - 0.5))
            else:
                new_nest[i] = int(nest[i] + self.beta * (random.random() - 0.5))
            # Ensure the machine index is within bounds
            new_nest[i] = max(0, min(new_nest[i], self.machines - 1))
        return new_nest

    def random_solution(self):
        solution = []
        for j in range(self.n_jobs):
            solution.append(random.randint(0, self.machines - 1))
        return solution

    def makespan(self, solution):
        machine_times = [0] * self.machines
        job_times = [0] * self.n_jobs
        for job, machine in enumerate(solution):
            start_time = max(machine_times[machine], job_times[job])
            job_times[job] = start_time + self.jobs[job][machine]
            machine_times[machine] = job_times[job]
        return max(job_times)

jobs = [
    [3, 2, 2], 
    [2, 3, 2], 
    [4, 3, 3]
]

machines = 3
n_nests = 10
n_iterations = 100

csa = CuckooSearch(jobs, machines, n_nests, n_iterations)
best_solution, best_makespan = csa.run()

print("Best Solution:", best_solution)
print("Best Makespan:", best_makespan)

