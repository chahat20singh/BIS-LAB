import numpy as np
import random

class PSO_VRP:
    def __init__(self, n_vehicles, n_customers, coordinates, capacity, n_particles, n_iterations, w=0.5, c1=1.5, c2=1.5):
        self.n_vehicles = n_vehicles
        self.n_customers = n_customers
        self.coordinates = coordinates
        self.capacity = capacity
        self.n_particles = n_particles
        self.n_iterations = n_iterations
        self.w = w   # Inertia weight
        self.c1 = c1  # Cognitive component
        self.c2 = c2  # Social component

        self.particles = [self.random_solution() for _ in range(n_particles)]
        self.velocities = [np.zeros_like(self.particles[0]) for _ in range(n_particles)]
        self.best_particle = self.particles[0]
        self.best_fitness = float('inf')

    def random_solution(self):
        # Ensure vehicle assignment is between 0 and n_vehicles - 1
        solution = np.array([random.randint(0, self.n_vehicles - 1) for _ in range(self.n_customers)])
        return solution

    def fitness(self, solution):
        vehicle_loads = np.zeros(self.n_vehicles)
        routes = {i: [] for i in range(self.n_vehicles)}
        total_distance = 0

        for customer, vehicle in enumerate(solution):
            routes[vehicle].append(customer)
            vehicle_loads[vehicle] += 1

        if np.any(vehicle_loads > self.capacity):
            return float('inf')

        for vehicle, route in routes.items():
            if len(route) == 0:
                continue
            route_distance = self.calculate_route_distance(route)
            total_distance += route_distance
        return total_distance

    def calculate_route_distance(self, route):
        distance = 0
        start = 0  # Depot is at index 0
        for customer in route:
            distance += np.linalg.norm(self.coordinates[start] - self.coordinates[customer])
            start = customer
        distance += np.linalg.norm(self.coordinates[start] - self.coordinates[0])  # Return to depot
        return distance

    def update_particles(self):
        for i in range(self.n_particles):
            for j in range(self.n_customers):
                r1 = random.random()
                r2 = random.random()
                self.velocities[i][j] = self.w * self.velocities[i][j] + self.c1 * r1 * (self.best_particle[j] - self.particles[i][j]) + self.c2 * r2 * (self.best_particle[j] - self.particles[i][j])
                self.particles[i][j] = int(np.round(self.particles[i][j]))  # Ensure the vehicle assignment is integer
                self.particles[i][j] = max(0, min(self.particles[i][j], self.n_vehicles - 1))  # Ensure it's within valid bounds

    def optimize(self):
        for iteration in range(self.n_iterations):
            for i in range(self.n_particles):
                fitness_value = self.fitness(self.particles[i])
                if fitness_value < self.best_fitness:
                    self.best_fitness = fitness_value
                    self.best_particle = self.particles[i]

            self.update_particles()

        return self.best_particle, self.best_fitness

coordinates = np.array([
    [0, 0],  # Depot at origin
    [1, 2],
    [2, 4],
    [3, 1],
    [4, 3],
    [5, 5]
])

n_vehicles = 2
n_customers = 5
capacity = 2
n_particles = 30
n_iterations = 100

pso_vrp = PSO_VRP(n_vehicles, n_customers, coordinates, capacity, n_particles, n_iterations)
best_solution, best_distance = pso_vrp.optimize()

print("Best Solution (Vehicle Assignments):", best_solution)
print("Best Fitness (Total Distance):", best_distance)
