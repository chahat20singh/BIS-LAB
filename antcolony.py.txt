import numpy as np
import random

class AntColonyTSP:
    def __init__(self, dist_matrix, n_ants, n_iterations, decay, alpha=1, beta=2):
        self.dist_matrix = dist_matrix
        self.n_ants = n_ants
        self.n_iterations = n_iterations
        self.decay = decay
        self.alpha = alpha
        self.beta = beta
        self.n_cities = len(dist_matrix)
        self.pheromone = np.ones((self.n_cities, self.n_cities)) / self.n_cities

    def run(self):
        shortest_path = None
        shortest_distance = float('inf')

        for _ in range(self.n_iterations):
            all_paths = self.gen_all_paths()
            self.spread_pheromone(all_paths)

            for path, dist in all_paths:
                if dist < shortest_distance:
                    shortest_distance = dist
                    shortest_path = path

            self.pheromone *= self.decay

        return shortest_path, shortest_distance

    def spread_pheromone(self, all_paths):
        for path, dist in all_paths:
            for move in path:
                self.pheromone[move] += 1.0 / dist

    def gen_path(self, start):
        visited = set()
        visited.add(start)
        path = []
        current_city = start
        while len(visited) < self.n_cities:
            next_city = self.pick_next_city(current_city, visited)
            path.append((current_city, next_city))
            visited.add(next_city)
            current_city = next_city
        return path

    def pick_next_city(self, current_city, visited):
        pheromone = self.pheromone[current_city]
        
        for city in visited:
            pheromone[city] = 0
        
        pheromone = pheromone ** self.alpha

        distance = np.array([self.dist_matrix[current_city][i] for i in range(self.n_cities)])
        distance = np.where(distance == 0, np.inf, distance)  # Prevent division by zero for self-loops
        distance = 1 / distance ** self.beta

        probability = pheromone * distance

        if np.sum(probability) == 0:
            probability = np.ones(self.n_cities) / self.n_cities  # uniform probability if sum is zero

        probability = probability / np.sum(probability)  # Normalize the probabilities

        return np.random.choice(range(self.n_cities), p=probability)

    def gen_all_paths(self):
        all_paths = []
        for _ in range(self.n_ants):
            start = random.randint(0, self.n_cities - 1)
            path = self.gen_path(start)
            distance = self.calculate_path_distance(path)
            all_paths.append((path, distance))
        return all_paths

    def calculate_path_distance(self, path):
        distance = 0
        for move in path:
            from_city, to_city = move
            distance += self.dist_matrix[from_city][to_city]
        from_city, to_city = path[-1]
        distance += self.dist_matrix[to_city][from_city]  # Return to the start city
        return distance

# Example distance matrix for a small TSP problem
dist_matrix = np.array([
    [0, 2, 2, 5, 7],
    [2, 0, 4, 8, 2],
    [2, 4, 0, 1, 3],
    [5, 8, 1, 0, 4],
    [7, 2, 3, 4, 0]
])

# Initialize and run the Ant Colony Optimization algorithm
aco = AntColonyTSP(dist_matrix=dist_matrix, n_ants=10, n_iterations=100, decay=0.95)
shortest_path, shortest_distance = aco.run()

print("Shortest path found:", shortest_path)
print("Shortest distance:", shortest_distance)
